<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>🔖 学习笔记 on 张文兵的笔记</title><link>https://notes.zhangwenbing.com/notes/</link><description>Recent content in 🔖 学习笔记 on 张文兵的笔记</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Wed, 06 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://notes.zhangwenbing.com/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>📝 所有权</title><link>https://notes.zhangwenbing.com/notes/rust/e3ksq3zkmps14gcxuirwzx/</link><pubDate>Wed, 06 Mar 2024 00:00:00 +0000</pubDate><guid>https://notes.zhangwenbing.com/notes/rust/e3ksq3zkmps14gcxuirwzx/</guid><description> 所有权 # 所有权规则 # Rust 中的每一个值都有一个 所有者（owner）。 值在任一时刻有且只有一个所有者。 当所有者（变量）离开作用域，这个值将被丢弃。 可Copy的类型 # 所有整数类型，比如 u32 。 布尔类型，bool ，它的值是 true 和 false 。 所有浮点数类型，比如 f64 。 字符类型，char 。 元组，当且仅当其包含的类型也都实现 Copy 的时候。比如，(i32, i32) 实现了 Copy ，但(i32, String) 就没有。</description></item><item><title>📝 借用与引用</title><link>https://notes.zhangwenbing.com/notes/rust/o4arkqgfnqygr5ckif2gkk/</link><pubDate>Wed, 06 Mar 2024 00:00:00 +0000</pubDate><guid>https://notes.zhangwenbing.com/notes/rust/o4arkqgfnqygr5ckif2gkk/</guid><description> 借用与引用 # 创建一个引用的行为称为 借用 允许使用值但不获取其所有权 引用规则 # 在任意给定时间，要么 只能有一个可变引用，要么 只能有多个不可变引用。 引用必须总是有效的。 可变引用 # 允许修改一个借用的值，这就是可变引用（&amp;amp;mut）。
fn main() { let mut s = String::from(&amp;#34;hello&amp;#34;); change(&amp;amp;mut s); } fn change(some_string: &amp;amp;mut String) { some_string.push_str(&amp;#34;, world&amp;#34;); } 悬垂引用（Dangling References） # fn main() { let reference_to_nothing = dangle(); } fn dangle() -&amp;gt; &amp;amp;String { // dangle 返回一个字符串的引用 let s = String::from(&amp;#34;hello&amp;#34;); // s 是一个新字符串 &amp;amp;s // 返回字符串 s 的引用 } // 这里 s 离开作用域并被丢弃。其内存被释放。 // 危险！</description></item></channel></rss>