[{"id":0,"href":"/notes/rust/e3ksq3zkmps14gcxuirwzx/","title":"📝 所有权","section":"📔 学习笔记","content":" 所有权 # 所有权规则 # Rust 中的每一个值都有一个 所有者（owner）。 值在任一时刻有且只有一个所有者。 当所有者（变量）离开作用域，这个值将被丢弃。 可Copy的类型 # 所有整数类型，比如 u32 。 布尔类型，bool ，它的值是 true 和 false 。 所有浮点数类型，比如 f64 。 字符类型，char 。 元组，当且仅当其包含的类型也都实现 Copy 的时候。比如，(i32, i32) 实现了 Copy ，但(i32, String) 就没有。 "},{"id":1,"href":"/notes/rust/o4arkqgfnqygr5ckif2gkk/","title":"📝 借用与引用","section":"📔 学习笔记","content":" 借用与引用 # 创建一个引用的行为称为 借用 允许使用值但不获取其所有权 引用规则 # 在任意给定时间，要么 只能有一个可变引用，要么 只能有多个不可变引用。 引用必须总是有效的。 可变引用 # 允许修改一个借用的值，这就是可变引用（\u0026amp;mut）。\nfn main() { let mut s = String::from(\u0026#34;hello\u0026#34;); change(\u0026amp;mut s); } fn change(some_string: \u0026amp;mut String) { some_string.push_str(\u0026#34;, world\u0026#34;); } 悬垂引用（Dangling References） # fn main() { let reference_to_nothing = dangle(); } fn dangle() -\u0026gt; \u0026amp;String { // dangle 返回一个字符串的引用 let s = String::from(\u0026#34;hello\u0026#34;); // s 是一个新字符串 \u0026amp;s // 返回字符串 s 的引用 } // 这里 s 离开作用域并被丢弃。其内存被释放。 // 危险！ "},{"id":2,"href":"/notes/ffmpeg/e3ksq3zkmps14gcxuirwzx/","title":"📝 检测透明通道","section":"📔 常用功能","content":" 检测透明通道 # FFmpeg命令 # $ ffmpeg -v error -i 123.mp4 -vf \u0026#34;select=\u0026#39;eq(n,0)\u0026#39;, alphaextract\u0026#34; -f null /dev/null [Parsed_alphaextract_1 @ 0x7fe8f5208100] Requested planes not available. [Parsed_alphaextract_1 @ 0x7fe8f5208100] Failed to configure input pad on Parsed_alphaextract_1 [vf#0:0 @ 0x7fe8f5005f40] Error reinitializing filters! Failed to inject frame into filter network: Invalid argument Error while filtering: Invalid argument [out#0/null @ 0x7fe8f5004900] Nothing was written into output file, because at least one of its streams received no packets. 判断条件 # 如果出现以上报错信息，则说明视频中没有透明通道。\n"},{"id":3,"href":"/articles/9mzhfnl58azjmeibfblvjy/","title":"hugo网站建设","section":"📚 我的文章","content":" 安装Hugo # 下载地址：https://github.com/gohugoio/hugo/releases\n创建网站 # hugo new site book cd book git init git submodule add https://github.com/alex-shpak/hugo-book themes/hugo-book 本地调试 # hugo server --disableFastRender --minify --ignoreCache github actions # mkdir -p .github/workflows touch .github/workflows/build.yml name: Build on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-20.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.123.7\u0026#39; # 是否启用 hugo extend extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: ${{ github.ref == \u0026#39;refs/heads/main\u0026#39; }} with: github_token: ${{ secrets.GH_PAGE_ACTION_TOKEN }} publish_dir: ./public github pages # 可以在项目的Settings中开启Pages服务，然后选择Branch为gh-pages即可。\n如果想要定制域名，可以参考官方文档 About custom domains and GitHub Pages\n"}]